import { generate } from '@oats-ts/oats-ts'
import typescriptParser from 'prettier/parser-typescript'
import {
  formatters,
  validator,
  readers,
  writers,
  presets,
  nameProviders,
  pathProviders,
  generator,
  loggers,
} from '@oats-ts/openapi'
import { failure, fluent, success, Try } from '@oats-ts/try'
import { IssueTypes } from '@oats-ts/validators'

const DUMMY_URL = 'https://dummy.schema.com'
const content = `{
  "openapi": "3.0.0",
  "info": {
    "title": "Primitive schemas",
    "description": "This file contains primitive named schemas",
    "version": "1.0"
  },
  "components": {
    "schemas": {
      "StringType": {
        "description": "This is a named string schema",
        "type": "string"
      },
      "NumberType": {
        "type": "number"
      },
      "BooleanType": {
        "type": "boolean"
      }
    }
  },
  "paths": {}
}`

export async function generateSource(): Promise<Try<string>> {
  const output = await generate({
    logger: loggers.verbose(),
    validator: validator(),
    reader: readers.test.json({
      path: DUMMY_URL,
      content: new Map().set(DUMMY_URL, content),
    }),
    generator: generator({
      nameProvider: nameProviders.default(),
      pathProvider: pathProviders.singleFile('test.ts'),
      children: presets.fullStack({
        overrides: {
          'json-schema/type-guard': {
            ignore: (schema: any) => Boolean(schema?.['x-ignore-validation']),
          },
          'json-schema/type-validator': {
            ignore: (schema: any) => Boolean(schema?.['x-ignore-validation']),
          },
        },
      }),
    }),
    writer: writers.typescript.memory({
      format: formatters.prettier({
        parser: 'typescript',
        arrowParens: 'always',
        printWidth: 120,
        semi: false,
        singleQuote: true,
        trailingComma: 'all',
        plugins: [typescriptParser],
      }),
      comments: {
        leadingComments: [
          {
            type: 'block',
            text: `This file has been generated by Oats`,
          },
        ],
      },
    }),
  })
  return fluent(output)
    .flatMap((data) => {
      if (data.length !== 1) {
        return failure([
          {
            message: `Should have a single output file, was ${data.length}`,
            path: 'output',
            severity: 'error',
            type: IssueTypes.length,
          },
        ])
      }
      const [file] = data
      return success(file?.content!)
    })
    .toTry()
}
